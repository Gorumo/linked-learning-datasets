<?xml version="1.0"?>


<!DOCTYPE rdf:RDF [
    <!ENTITY foaf "http://xmlns.com/foaf/0.1/" >
    <!ENTITY owl "http://www.w3.org/2002/07/owl#" >
    <!ENTITY xsd "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY schema "http://purl.org/vocab/aiiso/schema#" >
    <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
    <!ENTITY learning "http://www.semanticweb.org/k0shk/ontologies/2013/5/learning#" >
]>


<rdf:RDF xmlns="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#"
     xml:base="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6"
     xmlns:schema="http://purl.org/vocab/aiiso/schema#"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
     xmlns:foaf="http://xmlns.com/foaf/0.1/"
     xmlns:owl="http://www.w3.org/2002/07/owl#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:learning="http://www.semanticweb.org/k0shk/ontologies/2013/5/learning#">
    <owl:Ontology rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6">
        <owl:imports rdf:resource="http://www.semanticweb.org/k0shk/ontologies/2013/5/learning"/>
        <owl:imports rdf:resource="http://xmlns.com/foaf/0.1/"/>
    </owl:Ontology>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Annotation properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://xmlns.com/foaf/0.1/depiction -->

    <owl:AnnotationProperty rdf:about="&foaf;depiction"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Data properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://purl.org/vocab/aiiso/schema#description -->

    <owl:DatatypeProperty rdf:about="&schema;description"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Individuals
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://books.ifmo.ru/book/911/book_911.htm -->

    <owl:NamedIndividual rdf:about="http://books.ifmo.ru/book/911/book_911.htm"/>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#CourseIntelligentSystems -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#CourseIntelligentSystems">
        <rdf:type rdf:resource="&schema;Course"/>
        <rdfs:label xml:lang="en">Intelligent Systems</rdfs:label>
        <rdfs:label xml:lang="ru">Интеллектуальные системы</rdfs:label>
        <schema:description xml:lang="ru">Курс по Интеллектуальным системам, включающий следующий темы: Экспертные системы и Технологии Семантического Веба.</schema:description>
        <learning:hasResource rdf:resource="http://books.ifmo.ru/book/911/book_911.htm"/>
        <foaf:depiction rdf:resource="https://stack.versal.com/api2/assets/17be447f-2944-438a-97ff-31feeee4d940"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#DroolsGuvnorInstruction -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#DroolsGuvnorInstruction">
        <rdf:type rdf:resource="&learning;Instruction"/>
        <rdfs:label xml:lang="ru">Инструкция по работе с Drools Guvnor</rdfs:label>
        <learning:content xml:lang="ru">&lt;div class=&quot;spec-text-view&quot;&gt;&lt;p&gt;Для простоты установки и использования системы, подготовлен &lt;a target=&quot;_blank&quot; href=&quot;https://dl.dropboxusercontent.com/u/1497018/is-course/guvnor-distr.zip&quot;&gt;архив&lt;/a&gt;. Архив содержит Drools Guvnor, который может быть запущен на любом компьютере с установленной &lt;a target=&quot;_blank&quot; href=&quot;http://www.java.com/ru/&quot;&gt;Java&lt;/a&gt; 6 или выше.&lt;br&gt;Инструкция:&lt;br&gt;1. Скачать архив и разархивировать его в удобное место, например, C:\guvnor-distr\;&lt;br&gt;2. Открыть командную строку (для Windows) или терминал (для Linux);&lt;br&gt;3. Перейти в директорию bin, распакованного архива;&lt;br&gt;4. Запустить скрипт &lt;code&gt;startup.bat&lt;/code&gt; (для Windows) или &lt;code&gt;startup.sh&lt;/code&gt; (для Linux);&lt;br&gt;5. Откройте &lt;code&gt;http://localhost:9090&lt;/code&gt; в браузере;&lt;br&gt;6. А когда вы пожелаете остановить систему, выполните из скрипт &lt;code&gt;shutdown.bat&lt;/code&gt; (для Windows) или &lt;code&gt;shutdown.sh&lt;/code&gt; (для Linux).&lt;br&gt;&lt;em&gt;Замечание: все данные после остановки системы сохраняются на вашем компьютере, поэтому вы их не потеряете.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</learning:content>
        <learning:isInstructionOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystems1"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#DroolsTesterMain -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#DroolsTesterMain">
        <rdf:type rdf:resource="&learning;VerificationSystem"/>
        <rdfs:label xml:lang="ru">Система проверки решений для курса &quot;Интеллектуальные системы&quot;</rdfs:label>
        <learning:url rdf:datatype="&xsd;string">http://expertsystems.tk/drools-tester/#/main</learning:url>
        <learning:isVerificationSystemOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystems1"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystems1 -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystems1">
        <rdf:type rdf:resource="&learning;Practice"/>
        <rdfs:label xml:lang="ru">Практическая работа по экспертным системам</rdfs:label>
        <learning:content xml:lang="ru">&lt;p&gt;Практические задания будут выполняться в система &lt;a href=&quot;http://www.jboss.org/drools/&quot;&gt;Drools Guvnor&lt;/a&gt;. В качестве теоретического и практического руководства предлагается использовать методические указания &lt;a href=&quot;https://dl.dropboxusercontent.com/u/1497018/metoda-guvnor.pdf&quot;&gt;&quot;Рассмотрение систем управления бизнес-правилами на примере Drools Guvnor&quot;&lt;/a&gt;.&lt;br&gt;В третьем подразделе вы найдете инструкцию по установке и запуску Drools Guvnor на ваш компьютер. Вся необходимая информацию по разработке ЭС в системе собрана в методическом указании.&lt;br&gt;В четвертом подразделе описаны шаги по экспорту вашего решения из Guvnor и его отправки в проверяющую систему.&lt;/p&gt;</learning:content>
        <learning:hasInstruction rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#DroolsGuvnorInstruction"/>
        <learning:hasVerificationSystem rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#DroolsTesterMain"/>
        <learning:hasFAQ rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsFAQ"/>
        <learning:hasInstruction rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsSendResultsInstruction"/>
        <learning:hasPracticeTask rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsTask1"/>
        <learning:hasPracticeTask rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsTask2"/>
        <learning:isPracticeOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#m_ProductionRules"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsFAQ -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsFAQ">
        <rdf:type rdf:resource="&learning;FAQ"/>
        <rdfs:label xml:lang="en">FAQ. Expert Systems</rdfs:label>
        <rdfs:label xml:lang="ru">FAQ. Экспертные системы </rdfs:label>
        <learning:content xml:lang="ru">&lt;div&gt;&lt;div class=&quot;gadget-editor&quot;&gt;
&lt;div class=&quot;gadget-text js-text-region&quot;&gt;&lt;div class=&quot;spec-text-view&quot;&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Я создал модель, но система выдаёт ошибку &quot;Модель [&amp;lt;Модель&amp;gt;] необъявлена в пакете [&amp;lt;имя пакета&amp;gt;]&quot;&lt;/strong&gt;&lt;br&gt;Имя файла должно в точности совпадать с именем вашего пакета, например, если имя пакета &lt;em&gt;defaultPackage&lt;/em&gt;, то имя файла должно быть &lt;em&gt;defaultPackage.pkg&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Запуск &lt;code&gt;startup.bat&lt;/code&gt; скрипта заканчивается сообщением &quot;Neither the JAVA_HOME nor the JRE_HOME environment variable is defined. At least...&quot;&lt;/strong&gt;&lt;br&gt;Выполните команду &lt;code&gt;java -version&lt;/code&gt;, если распечаталась версия JRE или JDK, то вам нужно только объявить переменную окружения, если же команда выполнилась с ошибкой, тогда необходимо установить JRE (Java Runtime Edition) или JDK (Java Developer Edition) 6 или выше.&lt;br&gt;a. Чтобы установить переменную окружения JAVA_HOME, выполните следующую команду: &lt;code&gt;set JAVA_HOME=&amp;lt;абс. путь до папки, в которой установлена Java&amp;gt;&lt;/code&gt;.&lt;br&gt;b. Для скачивания и установки JRE перейдите на сайт &lt;a target=&quot;_blank&quot; href=&quot;http://java.com&quot;&gt;java.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Почему моё решение не проходит &lt;code&gt;test1&lt;/code&gt; для Задания №1?&lt;/strong&gt;&lt;br&gt;В первом задании есть один момент, который многими упускается: в тестах на вход НЕ дается экземпляр модели &lt;strong&gt;Output&lt;/strong&gt;, поэтому если вы пишите в части WHEN правила &quot;There is an Output...&quot;, а экземпляра модели &lt;strong&gt;Output&lt;/strong&gt; в рабочей памяти нет, то правило никогда не выполнится.&lt;br&gt;Как написано в условии к заданию, необходимо добавить экземпляр модели &lt;strong&gt;Output&lt;/strong&gt; одним из правил, которое выполняется &lt;em&gt;всегда&lt;/em&gt; раньше всех остальных, для этого в правиле устанавливается параметр salience больший 0 и часть WHEN оставляется пустой, чтобы правило выполнялось всегда независимо от каких-либо условий.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;js-editor-region&quot;&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</learning:content>
        <learning:isFAQOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystems1"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsSendResultsInstruction -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsSendResultsInstruction">
        <rdf:type rdf:resource="&learning;Instruction"/>
        <rdfs:label xml:lang="ru">Инструкция по отправке решений для проверки</rdfs:label>
        <learning:content xml:lang="ru">&lt;div class=&quot;spec-text-view&quot;&gt;&lt;p&gt;Проверка решений происходит в автоматическом режиме на основе заранее подготовленных тестовых сценариев. Для этого вам необходимо экспортировать архив из Drools Guvnor, содержащий ваше решение, зайти в систему проверки решений &lt;a href=&quot;http://expertsystems.tk/drools-tester&quot;&gt;ссылка&lt;/a&gt; и отправить архив.&lt;br&gt;Шаги:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Откройте ваш пакет и перейдите во вкладку &lt;em&gt;Edit&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;Далее нажмите кнопку &lt;em&gt;Build package&lt;/em&gt;, если сборка пакета прошла успешно вы должны увидеть сообщение &lt;em&gt;Package built successfully&lt;/em&gt; и ссылку, по которой вы должны скачать файл с расширением &lt;em&gt;.pkg&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;Отлично! Теперь заходите в Систему проверки решений и выберайте вкладку, соответствующую заданию,&lt;/li&gt;
&lt;li&gt;Для отправки решения вам необходимо указать почтовый адрес, который был указан во время регистрации на Versal.com.&lt;/li&gt;
&lt;li&gt;Все. Отправляйте решение и смотрите результаты во вкладке &lt;em&gt;Результаты&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</learning:content>
        <learning:isInstructionOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystems1"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsTask1 -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsTask1">
        <rdf:type rdf:resource="&learning;PracticeTask"/>
        <rdfs:label xml:lang="en">Task 1</rdfs:label>
        <rdfs:label xml:lang="ru">Задание №1</rdfs:label>
        <learning:numberOfTask rdf:datatype="&xsd;integer">1</learning:numberOfTask>
        <learning:content xml:lang="ru">&lt;div&gt;&lt;p&gt;В таблице (ниже по тексту) приведены характеристики наиболее широко известных драгоценных камней, включая их твердость (сопротивление внешним усилиям, измеряемое по шкале твердости Мора), плотность (отношение массы к единице объема, измеряемое в граммах на кубический сантиметр) и цвета. Запишите правила, необходимые для того, чтобы определить, является ли драгоценный камень хризобериллом, если даны три факта, представляющие твердость, плотность и цвет драгоценного камня. &lt;/p&gt;
&lt;style type=&quot;text/css&quot;&gt;
.tg  {border-collapse:collapse;border-spacing:0;border-color:#ccc;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f0f0f0;}
&lt;/style&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-031e&quot;&gt;Драгоценный камень&lt;/th&gt;
    &lt;th class=&quot;tg-031e&quot;&gt;Твердость&lt;/th&gt;
    &lt;th class=&quot;tg-031e&quot;&gt;Плотность&lt;/th&gt;
    &lt;th class=&quot;tg-031e&quot;&gt;Цвет&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;Алмаз&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;10&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;3,52&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;желтый, коричневый, зеленый,синий, белый, бесцветный&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;Корунд&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;9&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;4&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;красный, розовый, желтый,коричневый, зеленый, синий,фиолетовый, черный, белый,бесцветный&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;Хризоберилл&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;8.5&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;3.72&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;желтый, коричневый, зеленый&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;Шпинель&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;8&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;3.6&lt;/td&gt;
    &lt;td class=&quot;tg-031e&quot;&gt;красный, розовый, желтый,коричневый, зеленый, синий,фиолетовый, белый, бесцветный&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Далее, описаны две модели (классы) фактов, которые должны быть созданы и использованы в вашей ЭС.&lt;/p&gt;
&lt;p&gt;Наименования моделей и поле должны точно совпадать с описанием в задании иначе ваше решение не будет принято проверяющей системой.&lt;/p&gt;
&lt;div class=&quot;spec-text-view&quot;&gt;&lt;p&gt;Модели фактов:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Input&lt;/strong&gt;: - &lt;em&gt;модель входных данных&lt;/em&gt;&lt;ul&gt;&lt;li&gt;constancy : Decimal number - &lt;em&gt;твердость камня&lt;/em&gt;,&lt;/li&gt;&lt;li&gt;consistency : Decimal number -  &lt;em&gt;плотность камня&lt;/em&gt;,&lt;/li&gt;&lt;li&gt;color : Text - &lt;em&gt;цвет камня&lt;/em&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Output&lt;/strong&gt; - &lt;em&gt;модель выходных данных&lt;/em&gt;&lt;ul&gt;&lt;li&gt;isTarget : True or False -  &lt;em&gt;искомый камень или нет&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;На вход экспертной системы подается только экземпляр &lt;strong&gt;Input&lt;/strong&gt;. Экземпляр модели &lt;strong&gt;Output&lt;/strong&gt; должен быть добавлен в рабочую память одним из правил, которое выполняется всегда и первым, см. параметр salience (&lt;a target=&quot;_blank&quot; href=&quot;http://docs.jboss.org/drools/release/5.5.0.Final/drools-expert-docs/html_single/index.html#d0e5150&quot;&gt;http://docs.jboss.org/drools/release/5.5.0.Final/drools-expert-docs/html_single/index.html#d0e5150&lt;/a&gt;).&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</learning:content>
        <learning:isPracticeTaskOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystems1"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsTask2 -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystemsTask2">
        <rdf:type rdf:resource="&learning;PracticeTask"/>
        <rdfs:label xml:lang="en">Task 2</rdfs:label>
        <rdfs:label xml:lang="ru">Задание №2</rdfs:label>
        <learning:numberOfTask rdf:datatype="&xsd;integer">2</learning:numberOfTask>
        <learning:content xml:lang="ru">&lt;div class=&quot;text-editable&quot;&gt;&lt;p&gt;Напишите правила, которые помогают в процессе выбора кустарника, подходящего для посадки. В таблице (картинка ниже по тексту) перечислено несколько видов кустарников и указано, обладает ли каждое их этих растений определенными характеристиками, которые включают устойчивость к холоду, к затенению, к засухе, к влажной и кислой почве, к городским условиям (к загазованности воздуха), пригодность для кадочного выращивания, простота культивирования и быстрота роста. Отметка в таблице указывает, что укастарник обладает соответствующей характеристикой. В качестве входных данных для программы должны использоваться факты, указывающие желательную характеристику, которую должн иметь кустарник, а результатом работы программы должен быть список растений, обладающих всеми необходимыми характеристиками.&lt;/p&gt;&lt;/div&gt;
&lt;img class=&quot;unselectable js-image&quot; unselectable=&quot;on&quot; src=&quot;//static.versal.com/restapi/assets/b91d11d2-caf5-490f-ab1a-6a0dc8166829&quot; style=&quot;left: 0px; top: 0px; width: 713px; max-width: 713px; height: 341px; max-height: 341px;&quot;&gt;
&lt;div class=&quot;spec-text-view&quot;&gt;&lt;p&gt;Модели фактов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Сharacteristic&lt;/strong&gt; - модель входных данных&lt;ul&gt;
&lt;li&gt;coldWeather : True of False - &lt;em&gt;устойчивость к холоду,&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;shade : True or False - &lt;em&gt;устойчивость к затенению,&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;drought : True of False - &lt;em&gt;устойчивость к засухе,&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;wetSoil : True of False - &lt;em&gt;устойчивость к влажной почве,&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;acidSoil : True of False - &lt;em&gt;устойчивость к кислой почве,&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;urbanConditions : True of False - &lt;em&gt;устойчивость к городским условиям,&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;tubGrowing : True of False - &lt;em&gt;пригодность для кадочного выращивания,&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;easeOfCultivation : True of False - &lt;em&gt;простота культивирования,&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;speedOfGrowth : True of False - &lt;em&gt;быстрота роста.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plant&lt;/strong&gt; - модель растения&lt;ul&gt;
&lt;li&gt;name : Text - &lt;em&gt;имя кустарника&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;По завершению работы экспертной системы в рабочей памяти должны находиться экземпляры модели &lt;strong&gt;Plant&lt;/strong&gt;. Например, если в результате работы нашлись два кустарника обладающие желаемыми характеристиками, то в рабочей памяти должны быть два экземпляра &lt;strong&gt;Plant&lt;/strong&gt; с именами (name) соответсвующими именам кустарников.&lt;br&gt;На вход экспертной системы подаётся экземпляр модели &lt;strong&gt;Сharacteristic&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;</learning:content>
        <learning:isPracticeTaskOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#PracticeExpertSystems1"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_FramesAndObjectOrientedProgramming -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_FramesAndObjectOrientedProgramming">
        <rdf:type rdf:resource="&learning;Lecture"/>
        <rdfs:label xml:lang="en">Frames and Object Oriented Programming</rdfs:label>
        <rdfs:label xml:lang="ru">Фреймы и ООП</rdfs:label>
        <learning:numberOfLecture rdf:datatype="&xsd;integer">4</learning:numberOfLecture>
        <learning:isLectureOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#m_ProductionRules"/>
        <learning:hasResource rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_FramesAndObjectOrientedProgramming"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_IntroductionToSystemsBasedOnKnowledge -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_IntroductionToSystemsBasedOnKnowledge">
        <rdf:type rdf:resource="&learning;Lecture"/>
        <rdfs:label xml:lang="en">Introduction to systems based on knowledge</rdfs:label>
        <rdfs:label xml:lang="ru">Введение в системы, основанные на знаниях</rdfs:label>
        <learning:numberOfLecture rdf:datatype="&xsd;integer">1</learning:numberOfLecture>
        <learning:content xml:lang="ru">&lt;p&gt;&lt;b&gt; Слайд 1 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 2 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;С самого начала компьютерной эпохи, которую, на мой взгляд, следует отсчитывать от революционного доклада Фон Неймона об архитектуре вычислительной машины с хранимой программой в 1954 году, специалисты предпринимали попытки создания систем, направленных на решение интеллектуальных задач: доказательство теорем, поиск в пространстве состояний, машинный перевод, распознание образов, машинное творчество и т.п. Это был романтический период развития искусственного интеллекта, когда казалось, что создать заменяющие человека системы возможно и в сравнительно короткие сроки. Алан Тьюринг сформулировал свой знаменитый тест на интеллектуальность, а Ньюэл и Саймон разработали первую интеллектуальную программу GPS (General Problem Solver). Однако, при переходе от учебных и игровых задач к реальным примерам оказалось, что новые интеллектуальные методы и алгоритмы не справляются со специфическими и часто запутанными прикладными проблемами из различных сфер деятельности. Причиной тому явились не сложность решения как такового, а трудности при формализации этого решения. Другими словами, для значительного количества «человеческих» или экспертных задач невозможно написать математическое уравнение или алгоритм. Решение этих задач характеризуется применением интуиции и субъективных оценок. Одновременно определенные результаты были получены в области когнитивной психологии, лингвистике и формальной логике, которые сформировали необходимый базис для развития человеко-машинных интерфейсов и методологии баз знаний.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Слайд 3&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Важно понимать, каким образом и на каких методах построен процесс приятия решений в конкретной системе. Принятие решений человеком формализовано в теории принятия решений — области исследования, включающей понятия и методы математики, статистики, экономики, менеджмента и психологии с целью изучения закономерностей выбора людьми путей решения разного рода задач, а также способов поиска наиболее выгодных из возможных решений.&lt;/p&gt;

&lt;p&gt;Если решение полностью принимает машина, то это уже теория автоматического управления - научная дисциплина, изучающая процессы автоматического управления объектами разной физической природы. Существенную роль тут играют корректная классификация системы управления и выбор математических моделей. Отдельно выделяют интеллектуальные системы автоматического управления, содержащие базы знаний.&lt;/p&gt;

&lt;p&gt;Однако, интеллектуальное поведение машины не означает полностью автономной работы на всем протяжении жизненного цикла и без оператора. Поддержка базы знаний требует привлечения человека для решения концептуальных вопросов, разрешения конфликтов и т.п.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 4 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Согласно определениям на википедии знание - это:&lt;/p&gt;
&lt;p&gt;1) форма существования и систематизации результатов познавательной деятельности человека. Знание помогает людям рационально организовывать свою деятельность и решать различные проблемы, возникающие в её процессе.&lt;/p&gt;
&lt;p&gt;2) в теории искусственного интеллекта и экспертных систем — совокупность информации и правил вывода (у индивидуума, общества или системы ИИ) о мире, свойствах объектов, закономерностях процессов и явлений, а также правилах использования их для принятия решений. Главное отличие знаний от данных состоит в их внутренней структурированности и активности, появление в базе новых фактов или установление новых связей может стать источником изменений в принятии решений.&lt;/p&gt;

&lt;p&gt;Т.е. мы можем говорить о знаниях как о техническом объекте, однако открытым остается вопрос, можем ли мы выразить знания моделями и алгоритмами? и какова природа знаний?&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 5 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Как отличить знания, которые действительно необходимы для решения задачи, от знаний о повседневном обиходе? Знания доказанные и верифицируемые от домыслов и догадок? Рациональные и формализуемые знания от шарлатанства и передергивания фактов?&lt;/p&gt;
&lt;p&gt;Некоторые, на первый взгляд вполне осмысленные задачи, могут оказаться слишком сложными для решения с помощью компьютера. В то же время, существуют примеры корректных формальных решений (см. пример далее) для проблем, оказавшихся в действительности ошибочными и не существующими в действительности. Можно ли говорить в этом случае о наличии научной теории для таких проблем?&lt;/p&gt;
&lt;p&gt;Наконец, всегда ли необходимо математическое моделирование для решения задач? В реальности человек не использует для поиска решения какие-либо модели и даже логические рассуждения. Выработка решения осуществляется в большинстве случаев интуитивно, и процесс получения этих решений мало изучен.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 6 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;В этом примере показано, как знания могут трансформироваться со временем. При этом решаемая проблема меняется значительно, от того, что изначально считалось принципиально невозможным, до возможного и осуществимого на практике. При этом само теоретическое решение остается почти неизменным. Т.е. терия существует как бы отдельно от контекста ее применения.&lt;/p&gt;
&lt;p&gt;В данном примере речь идет о теоетической возможности получения фото и видео изображений. На слайде показаны основные теоретические положения, необходимые для решения задачи.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 7 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Однако, 2000 лет назад взгляд на природу возникновения изображений был принципиально другим - истинным считался тот факт, что «зрительные» лучи, исходя из глаз и «ощупывая» предметы, возвращались обратно, формируя изображения непосредственно в глазу. Возможно ли применить уже известную на то время геометрическую оптику для фиксации изображений действительности?&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 8 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;2000 лет назад задача получения фотографических изображений казалась принципиально невозможной, т.к. зрительные лучи, как считалось, могли исходить только из глаз живых существ. Но как объяснить эффект камеры обскуры? Это магия или эффекту камеры есть рациональное объяснение? Все объяснил Абу Али ал-Хасан ибн ал-Хайсам ал-Басри в X веке, предположив, что вместо зрительных лучей в действительности существуют источники света и световые лучи. Именно эти лучи, проходя через отверстие в стене камеры обскуры, формируют изображение на ее противоположной стене.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 9 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Приведенный пример показывает, что одни и те же знания в разном контексте могут быть как истинными, так и ложными. Одни и те же лучи, подчиняясь законам геометрической оптики, могут или не могут формировать изображение на плоскости, в зависимости от того, считаем ли мы их световыми или зрительными.&lt;/p&gt;
&lt;p&gt;Но изменение контекста в данном примере вызвано не развитием теории геометрической оптики, а необходимостью объяснить свой чувственный опыт и загадочные явления.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 10 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Приведенный пример требует дополнительного комментария, т.к. прежде чем формализовать знания, необходимо объяснить их природу и их язык. Очень часто считают, что идеальным способом выразить знание является написание математических формул и уравнений. Однако, как уже было показано выше, знания бывают совершенно различной природы, и выбор используемых моделей должен быть адекватен как этой природе, так и языку, которым пользуются носители этих знаний. Следует также отметить, что помимо математических моделей бывают также физические, концептуальные, эвристические, ментальные, морфологические и многие другие.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 11 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Чтобы правильно понять природу знаний, нужно определить, кто же ее изучает? Помимо философии изучением знаний занимаются психология (когнитивные аспекты, память, рассуждения), социология (процессы возникновения знаний, взаимодействие людей в процессе создания новых знаний) и, конечно, кибернетика, информатика, искусственный интеллект.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 12 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;В искусственном ителлекте (ИИ) существуют два основных направления: биоинспирированные алгоритмы и системы и методы «черного ящика». Первое направление основано на принципах функционирования живых организмов: нейронные сети, эволюционное программирование, генетические алгоритмы, роевые алгоритмы и др. Однако, в явном виде это направление ИИ знаний не использует. Методы «черного ящика», или системы, основанные на знаниях, напротив, не моделируют биологическую структуру живого организма, а пытаются воспроизвести принцип обработки знаний человеком. Другими словами, эти системы моделируют структуру памяти и логику рассуждений человека. Одним из основных представителей этого направления являются экспертные системы.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 13 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Предметом изучения теории систем, основанных на знаниях, являются: представление в компьютерной памяти (репрезентация) знаний и когнитивные процессы (процессы понимания), моделирование процесса рассуждений, проблема определения истинности и непротиворечивости решений, представление и обработка нечетких знаний.&lt;/p&gt;
&lt;p&gt;Важно отметить, что вопросы моделирования структуры и функций объектов реального мира НЕ рассматриваются. Т.е. обрабтка информации осуществляется на символьном уровне с помощью формального языка представления знаний.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 14 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Прежде чем более подробно говорить о знаниях, необходимо понять, чем они отличаются от других видов информации. Информацию вцелом можно классифицировать на следующие группы:&lt;/p&gt;
&lt;p&gt;- контент (неупорядоченная и неструктурированная информация, например, интернет-контент),&lt;/p&gt;
&lt;p&gt;- данные (имеют тип, характеризуются моделью данных, например, содержимое баз данных),&lt;/p&gt;
&lt;p&gt;- знания (то, что необходимо для решения задач).&lt;/p&gt;
&lt;p&gt;Другими словами, знания — это закономерности предметной области (принципы, связи, законы), полученные в результате практической деятельности и профессионального опыта, позволяющие специалистам ставить и решать задачи в этой области.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 15 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Трудноформализуемые знания всегда субъективны. Они зарождаются в памяти человека как результат его практической деятельности и мышления. Но при этом важнейшим их свойством является возможность их фиксации на материальных носителях и передачи от одного человека к другому. Это необходимое условие для построение компьютерной системы, основанной на знаниях.&lt;/p&gt;
&lt;p&gt;Также важным свойством знаний является наличие связного набора понятий (определяемых через интенсионал и/или экстенсионал), которым можно оперировать в процессе рассуждений.&lt;/p&gt;
&lt;p&gt;Интенсионал понятия — это определение его через соотнесение с понятием более высокого уровня абстракции с указанием специфических свойств. Интенсионалы формулируют знания об объектах. Другой способ определяет понятие через соотнесение с понятиями более низкого уровня абстракции или перечисление фактов, относящихся к определяемому объекту. Это есть определение через данные, или экстенсионал понятия.&lt;/p&gt;
&lt;p&gt;Рассмотрим пример знаний о понятии «птица». Его интенсионалом будет «Летающее животное с крыльями и клювом», а экстенсионал этого понятия: «Птица — это голубь, воробей, ворона, чайка и др.»&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 16 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Для правильного выбора модели представления знаний в памяти компьютера необходимо сначала классифицировать знания. Наиболее полная и удачная классификация знания была предложена проф. Гавриловой Т.А.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 17 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Признак классификации знаний по глубине важен с точки зрения выбора основного формата для описания знаний. Так, например, глубинные знания удобнее представлять в виде детальных схем или структур (объектов, записей). А при описании поверхностных знаний важнее показать взаимосвязь между понятиями, например, с помощью графа.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 18 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Классификация по владельцу необходима для выбора правильных инструментов извлечения и записи знаний. Например, для коллективных знаний необходимы коллаборативные инструменты. В некоторых случаях, таким инструментом могут быть wiki-системы. Для личных знаний, как правило, к работе необходимо привлекать инженера по знаниям для интервьюирования эксперта.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 19 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Классификация по форме определяет процедуру формализации. Для явных знаний можно применить автматизированые средства обработки информации с носителей, на которых зафиксированы эти знания. Неявные знания требуют нескольких итераций ручной обработки материалов, которые предоставит эксперт (записи интервью, наблюдения и пр.)&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 20 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;От источников получения знаний также зависит, насколько возможно пользоваться средствами автоматизации при обработке знаний. Непосредственные знания предварительно нужно записать в какой-либо форме, в то время как опосредованные знания уже были записаны их владельцем.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 21 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Наконец, сфера применения определяет окружение, в котором будет функционировать будущая система, основанная на знаниях. Главным образом, следует обращать внимание на требования той или иной сферы применения к стыковке системы с внешними источниками информации и данных (датчики и сенсоры, БД, поисковые системы), а также на требования к интерфейсам пользователя для общения с системой.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 22 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Для превращения знаний из «человеческой» формы в формализованное представление в памяти компьютера служит инженерия знаний.&lt;/p&gt;
&lt;p&gt;Инженерия знания (knowledge engineering) — достаточно молодое направление искусственного интеллекта, возникшее тогда, когда практические разработчики столкнулись с весьма нетривиальными проблемами выявления и формализации знаний.&lt;/p&gt;
&lt;p&gt;Инженерия знаний — это ветвь информатики, изучающая модели и методы извлечения, структурирования и формализации (представления) знаний для их обработки в интеллектуальных и информационных системах.&lt;/p&gt;
&lt;p&gt;Традиционно при разработке систем, основанных на знаниях, выделяют три фазы до-машинной обработки знаний:&lt;/p&gt;
&lt;p&gt;Первая — извлечение (получение) знаний из источника (эксперты, Интернет, специальная литература). Трудоемкость этой фазы недооценена. Результат ее — огромное количество гетерогенных (разнохарактерных) противоречивых фрагментов знаний в виде протоколов и интервью, стенограмм, документов, фото и пр.&lt;/p&gt;
&lt;p&gt;Вторая — концептуализация (структурирование) разрозненных фрагментов в единую модель. Результат — часто слабоформализованное представление, называемое полем знаний в форме интеллект-карт, концепт-графов, таблиц решений.&lt;/p&gt;
&lt;p&gt;Третья — формализация поля знаний при помощи специализированных языков представления знаний (ЯПЗ). Результат — база знаний, описанная на ЯПЗ, например с помощью фреймов, семантических сетей или продукций, о которых речь пойдет позже.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 23 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Языки представления знаний могут быть разбиты на несколько основных групп: табличные, текстовые, графические (графовые), фреймы (объектные структуры) и логические. К ним можно добавить еще одну - онтологии, которая стала доминирующей формой описания знаний в последнее время, главным образом, благодаря развитию Интернета. Хотя строго говоря, онтологии, являясь формально логическим языком, комбинируют в себе свойства объектных структур, графов и теоретико-множественных подход. Подробнее об этих группах языков представления знаний речь пойдет в следующих лекциях.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 24 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Экспертные системы (ЭС) — это наиболее распространенный класс систем, основанных на знаниях, ориентированный на тиражирование опыта высококвалифицированных специалистов в областях, где качество принятия решений традиционно зависит от уровня экспертизы, например, медицина, юриспруденция, геология, экономика, военное дело и др.&lt;/p&gt;
&lt;p&gt;ЭС эффективны лишь в специфических «экспертных» областях, где важен эмпирический опыт специалистов. Например, компания American Express сократила свои потери на 27 млн долл. в год благодаря экспертной системе, определяющей целесообразность выдачи или отказа в кредите той или иной фирме. А компания Digital Equipment в свое время смогла сократить количество ошибок проектирования мейнфреймов с 30 до одного процента. И таких примеров можно привести множество.&lt;/p&gt;
&lt;p&gt;Современные ЭС — это сложные программные комплексы, аккумулирующие знания специалистов в конкретных предметных областях и распространяющие этот эмпирический опыт для консультаций менее квалифицированных пользователей. Задача экспертных систем направлена на использование автоматизированных методов обработки информации в тех областях науки и техники, где малопригодны традиционные математические методы моделирования. В этих областях важны смысловая и логическая обработка информации, опыт экспертов.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 25 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Факторы, свидетельствующие о необходимости разработки и внедрения экспертных систем:&lt;/p&gt;
&lt;p&gt;- невозможность или неэффективность математического моделирования;&lt;/p&gt;
&lt;p&gt;- нехватка специалистов, затрачивающих значительное время на оказание помощи другим;&lt;/p&gt;
&lt;p&gt;- выполнение небольшой задачи требует многочисленного коллектива специалистов, поскольку ни один из них не обладает достаточным знанием;&lt;/p&gt;
&lt;p&gt;- сниженная производительность, поскольку задача требует полного анализа сложного набора условий, а обычный специалист не в состоянии просмотреть (за отведенное время) все эти условия;&lt;/p&gt;
&lt;p&gt;- большое расхождение между решениями самых хороших и самых плохих исполнителей;&lt;/p&gt;
&lt;p&gt;- а также, например, наличие конкурентов, имеющих преимущество в силу того, что они лучше справляются с поставленной задачей.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 26 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Подходящие задачи для экспертных системы обычно имеют следующие характеристики:&lt;/p&gt;
&lt;p&gt;- являются узкоспециализированными, т.е. сконцентрированы на решении какой-то конкретной задачи;&lt;/p&gt;
&lt;p&gt;- являются сложными, т.е. нетривиальными в решении;&lt;/p&gt;
&lt;p&gt;- имеют «шум» в данных (неточность, неполноту, некорректность);&lt;/p&gt;
&lt;p&gt;- не зависят в значительной степени от общечеловеческих знаний или соображений здравого смысла;&lt;/p&gt;
&lt;p&gt;- не являются для эксперта ни слишком легкими, ни слишком сложными. (Время, необходимое эксперту для решения проблемы, должно быть средним для выбранного класса задач).&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 27 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Традиционными областями применения экспертных систем являются следующие:&lt;/p&gt;
&lt;p&gt;Интерпретация данных. Это одна из традиционных задач для экспертных систем. Под интерпретацией понимается определение смысла данных, результаты которого должны быть согласованными и корректными. Обычно предусматривается многовариантный анализ данных.&lt;/p&gt;
&lt;p&gt;Диагностика. Под диагностикой понимается обнаружение неисправности в некоторой системе. Неисправность – это отклонение от нормы. Такая трактовка позволяет с единых теоретических позиций рассматривать и неисправность оборудования в технических системах, и заболевания живых организмов, и всевозможные природные аномалии. Важной спецификой является необходимость понимания функциональной структуры (&quot;анатомии&quot;) диагностирующей системы.&lt;/p&gt;
&lt;p&gt;Мониторинг. Основная задача мониторинга – непрерывная интерпретация данных в реальном масштабе времени и сигнализация о выходе тех или иных параметров за допустимые пределы. Главные проблемы – &quot;пропуск&quot; тревожной ситуации и инверсная задача &quot;ложного&quot; срабатывания. Сложность этих проблем в размытости симптомов тревожных ситуаций и необходимость учета временного контекста.&lt;/p&gt;
&lt;p&gt;Проектирование. Проектирование состоит в подготовке спецификаций на создание &quot;объектов&quot; с заранее определенными свойствами. Под спецификацией понимается весь набор необходимых документов: чертеж, пояснительная записка и т.д. Основные проблемы здесь – получение четкого структурного описания знаний об объекте и проблема &quot;следа&quot;. Для организации эффективного проектирования и, в еще большей степени, перепроектирования необходимо формировать не только сами проектные решения, но и мотивы их принятия. Таким образом, в задачах проектирования тесно связываются два основных процесса, выполняемых в рамках соответствующей ЭС: процесс вывода решения и процесс объяснения.&lt;/p&gt;
&lt;p&gt;Прогнозирование. Прогнозирующие системы логически выводят вероятные следствия из заданных ситуаций. В прогнозирующей системе обычно используется параметрическая динамическая модель, в которой значения параметров &quot;подгоняются&quot; под заданную ситуацию. Выводимые из этой модели следствия составляют основу для прогнозов с вероятностными оценками.&lt;/p&gt;
&lt;p&gt;Планирование. Под планированием понимается нахождение планов действий, относящихся к объектам, способным выполнять некоторые функции. В таких ЭС используются модели поведения реальных объектов с тем, чтобы логически вывести последствия планируемой деятельности.&lt;/p&gt;
&lt;p&gt;Обучение. Системы обучения диагностируют ошибки при изучении какой-либо дисциплины с помощью компьютера и подсказывают правильные решения. Они аккумулируют знания о гипотетическом &quot;ученике&quot; и его характерных ошибках, затем в работе способны диагностировать слабости в знаниях обучаемых и находить соответствующие средства для их ликвидации. Кроме того, они способны планировать обучение ученика в зависимости от его успехов.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 28 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Реальные ЭС могут иметь сложную, разветвленную структуру модулей, но для любой ЭС необходимо наличие следующих основных блоков:&lt;/p&gt;
&lt;p&gt;- БЗ – база знаний – наиболее ценный компонент ядра ЭС, совокупность знаний о предметной области и способах решения задач, записанная в форме, понятной неспециалистам в программировании: эксперту, пользователю и др. Обычно знания в БЗ записываются в форме, приближенной к естественному языку. Форма записи знаний получила название язык представления знаний (ЯПЗ). В различных системах могут использоваться различные ЯПЗ. Параллельно такому &quot;человеческому&quot; представлению БЗ может существовать во внутреннем &quot;машинном&quot; представлении. Преобразование между различными формами представления БЗ должно осуществляться автоматически, так как редактирование БЗ не подразумевает участие программиста-разработчика.&lt;/p&gt;
&lt;p&gt;- МВ – машина вывода – блок, моделирующий ход рассуждений эксперта на основании знаний, заложенных в БЗ. Машина вывода является неизменной частью ЭС. Однако большинство реальных ЭС имеют встроенные средства управления ходом логического вывода с помощью так называемых метаправил, записываемых в БЗ.&lt;/p&gt;
&lt;p&gt;- Рабочая память – хранит промежуточные результаты вычислений, необходимые для работы машины вывода.&lt;/p&gt;
&lt;p&gt;- Редактор базы знаний – предназначен для разработчиков ЭС. С помощью этого редактора в БЗ добавляются новые знания или редактируются существующие.&lt;/p&gt;
&lt;p&gt;- Интерфейс пользователя – блок, предназначенный для взаимодействия ЭС с пользователем, через который система запрашивает необходимые для ее работы данные, и выводит результат. Система может иметь «жесткий» интерфейс, ориентированный на определенный способ ввода и вывода информации, или может включать генератор специализированных интерфейсов для более эффективного взаимодействия с пользователем.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 29 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;В разработке любого программного обеспечения участвуют, как правило, несколько специалистов выполняющих различные роли: заказчик, постановщик задачи, аналитик, проектировщик, программист, кодировщик, тестировщик и др. Хотя подобное теоретическое разделение бывает часто условным, осознание коллективом разработчиков своих функций и задач представляется важным.&lt;/p&gt;
&lt;p&gt;Роли разработчиков являются постоянными на протяжении всей разработки. Совмещение ролей нежелательно, но на практике, часто по объективным или субъективным причинам, специалисты все же совмещают несколько ролей. Иногда, в силу особенностей проекта, некоторые роли оказываются лишними. В случае простого проекта, опытный специалист может реализовать его в одиночку, взяв на себя все необходимые роли.&lt;/p&gt;
&lt;p&gt;Специфика технологии создания ЭС вводит определенное разделение ролей, несколько отличное от общепринятых участников разработки программного обеспечения. Инициатором создания новой ЭС является заказчик. Он же обычно бывает и основным пользователем, поскольку, как уже было отмечено выше, ЭС строится в некоторой узкоспециализированной области знаний и рассчитана на ограниченный круг специалистов. Заказчик (пользователь) может участвовать при разработке интерфейса пользователя, так как система должна быть органично встроена в существующую схему  рабочих операций, иначе эффективность от ее использования может быть снижена.&lt;/p&gt;
&lt;p&gt;Успех разработки ЭС зависит практически полностью от работы инженера по знаниям и эксперта. Уже во время первоначального общения они должны решить, будет ли их сотрудничество успешным или потребуется привлечение других экспертов или инженеров. Это немаловажно, поскольку обе стороны будут работать вместе. В процессе разработки и последующего расширения системы инженер по знаниям помогает эксперту структурировать знания, определять и формализовать понятия и правила, необходимые для решения проблем. Основная ответственность при этом ложится на инженера по знаниям. Он фактически является проектировщиком системы. Основное отличие инженера по знаниям от проектировщика программного обеспечения заключается в том, что в основном его усилия сконцентрированы на базе знаний, а предметом проектирования являются не алгоритмы программы, а знания, которые он получает от эксперта.&lt;/p&gt;
&lt;p&gt;Программист выполняет более традиционные для разработки ПО функции. Однако, особенностью являются с одной стороны специализированные средства разработки, а с другой - необходимость погружаться в предметную область и владеть теорией представления знаний и автоматических рассуждений (логического вывода).&lt;/p&gt;
&lt;p&gt;Когда экспертная система близка к завершению, инженер по знаниям должен убедиться в том, что эксперты и пользователи знают, как эксплуатировать и обслуживать ее. Пользователи выполняют также роли тестировщиков. Для подтверждения адекватности и полезности системы важно предоставить каждому из пользователей возможность поставить перед ЭС реальные задачи, а затем проследить, как она выполняет эти задачи, и сравнить эти результаты с теми, что получает человек при решении тех же задач.&lt;/p&gt;
&lt;p&gt;В случае если в качестве инструментария используется низкоуровневое средство разработки, то есть какой-либо язык программирования, то необходимо включить в коллектив разработчиков одного или нескольких программистов. При стыковке системы со своим окружением (существующим оборудованием и программным обеспечением) также понадобится помощь программиста. Однако, если система разрабатывается с использованием оболочки ЭС, то роль программиста становится лишней. А инженер по знаниям вполне может самостоятельно кодировать знания посредством редактора БЗ используемой оболочки.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 30 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Важнейшую роль при разработке ЭС играет технология прототипирования. Прототипная система является усеченной версией экспертной системы, спроектированной для проверки правильности кодирования фактов, связей и стратегий рассуждения эксперта. Она также дает возможность инженеру по знаниям привлечь эксперта к активному участию в процессе разработки экспертной системы, и, следовательно, к принятию им обязательства приложить все усилия к созданию системы в полном объеме.&lt;/p&gt;

&lt;p&gt;Идентификация проблемы.&lt;/p&gt;
&lt;p&gt;На этом этапе происходит знакомство и обучение членов коллектива разработчиков, а также создание неформальной формулировки проблемы. Уточняется задача, планируется ход разработки прототипа экспертной системы. Также определяются:&lt;/p&gt;
&lt;p&gt;- необходимые ресурсы (время, люди, компьютеры и т.д.);&lt;/p&gt;
&lt;p&gt;- источники знаний (книги, дополнительные эксперты, методики);&lt;/p&gt;
&lt;p&gt;- имеющиеся аналогичные экспертные системы;&lt;/p&gt;
&lt;p&gt;- цели (распространение опыта, автоматизация рутинных действий и др.);&lt;/p&gt;
&lt;p&gt;- классы решаемых задач и т.д.&lt;/p&gt;

&lt;p&gt;Извлечение знаний&lt;/p&gt;
&lt;p&gt;Осуществляется получение инженером по знаниям наиболее полного из возможных представления о предметной области и способах принятия решения в ней. Происходит перенос компетентности экспертов на инженеров по знаниям с использованием различных методов:&lt;/p&gt;
&lt;p&gt;- анализ текстов;&lt;/p&gt;
&lt;p&gt;- диалоги;&lt;/p&gt;
&lt;p&gt;- экспертные игры;&lt;/p&gt;
&lt;p&gt;- лекции;&lt;/p&gt;
&lt;p&gt;- дискуссии;&lt;/p&gt;
&lt;p&gt;- интервью;&lt;/p&gt;
&lt;p&gt;- наблюдение и другие.&lt;/p&gt;

&lt;p&gt;Структурирование, или концептуализация, знаний.&lt;/p&gt;
&lt;p&gt;Производится разработка неформального описания знаний о предметной области в виде графа, таблицы, диаграммы или текста, которое отражает основные концепции и взаимосвязи между понятиями предметной области. Такое описание называется полем знаний. Выявляется структура полученных знаний о предметной области, т.е. определяются:&lt;/p&gt;
&lt;p&gt;- терминология;&lt;/p&gt;
&lt;p&gt;- список основных понятий и их атрибутов;&lt;/p&gt;
&lt;p&gt;- отношения между понятиями;&lt;/p&gt;
&lt;p&gt;- структура входной и выходной информации;&lt;/p&gt;
&lt;p&gt;- стратегия принятия решений;&lt;/p&gt;
&lt;p&gt;- ограничения стратегий и т.д.&lt;/p&gt;

&lt;p&gt;Формализация&lt;/p&gt;
&lt;p&gt;Строится формализованное представление концепций предметной области на основе выбранного языка представления знаний (ЯПЗ). Выполняется разработка базы знаний на языке представления знаний, который, с одной стороны, соответствует структуре поля знаний, а, с другой, позволяет реализовать прототип системы на следующей стадии программной реализации. Традиционно на этом этапе используются:&lt;/p&gt;
&lt;p&gt;- логические методы (исчисления предикатов I-го порядка и др.);&lt;/p&gt;
&lt;p&gt;- продукционные модели (с прямым и обратным выводом);&lt;/p&gt;
&lt;p&gt;- семантические сети;&lt;/p&gt;
&lt;p&gt;- фреймы;&lt;/p&gt;
&lt;p&gt;- объектно-ориентированные языки, основанные на иерархии классов, объектов.&lt;/p&gt;

&lt;p&gt;Реализация&lt;/p&gt;
&lt;p&gt;Окончательная разработка программного комплекса, демонстрирующего жизнеспособность подхода в целом. Чаще всего первый прототип отбрасывается на этапе реализации действующей ЭС.&lt;/p&gt;
&lt;p&gt;Создается прототип экспертной системы, включающий базу знаний и остальные блоки, при помощи одного из следующих способов:&lt;/p&gt;
&lt;p&gt;- программирование на традиционных языках типа PYTHON, С#, Java и др.;&lt;/p&gt;
&lt;p&gt;- программирование на специализированных языках, применяемых в задачах искусственного интеллекта: LISP, Prolog и др.;&lt;/p&gt;
&lt;p&gt;- использование инструментальных средств разработки ЭС типа DROOLS, СLIPS и др.;&lt;/p&gt;
&lt;p&gt;- использование «пустых» ЭС или «оболочек» типа EXSYS и др.&lt;/p&gt;

&lt;p&gt;Тестирование&lt;/p&gt;
&lt;p&gt;Этот этап включает выявление ошибок в подходе и реализации прототипа и выработка рекомендаций по доводке системы до промышленного варианта. Оценивается и проверяется работа программ прототипа с целью приведения в соответствие с реальными запросами пользователей. Проверяются следующие свойства прототипа:&lt;/p&gt;
&lt;p&gt;удобство и адекватность интерфейсов ввода-вывода (характер вопросов в диалоге, связность выводимого текста результата и др.);&lt;/p&gt;
&lt;p&gt;- эффективность стратегии управления (порядок перебора, использование нечеткого вывода и др.);&lt;/p&gt;
&lt;p&gt;- качество проверочных примеров;&lt;/p&gt;
&lt;p&gt;- корректность базы знаний (полнота и непротиворечивость правил).&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 31 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Понятие прототипа требует дополнительных комментариев. Прототипом в действительности следует называть не какую-то конкретную версию программного обеспечения, а семейство этих версий.&lt;/p&gt;
&lt;p&gt;Главной задачей создания демонстрационного прототипа является ответ на перечисленные ниже вопросы:&lt;/p&gt;
&lt;p&gt;- данная задача может быть решена с помощью  экспертной системы;&lt;/p&gt;
&lt;p&gt;- экспертную систему можно создать предлагаемыми средствами;&lt;/p&gt;
&lt;p&gt;- имеется подходящий эксперт;&lt;/p&gt;
&lt;p&gt;- предложенные критерии производительности являются разумными;&lt;/p&gt;
&lt;p&gt;- затраты и срок их окупаемости приемлемы для заказчика.&lt;/p&gt;

&lt;p&gt;Основная работа при создании исследовательского прототипа заключается в существенном расширении базы знаний, т.е. добавлении большого числа дополнительных правил, фреймов, узлов семантической сети или других элементов знаний. В то же время эксперт и инженер по знаниям могут увеличить базу знаний системы, включая правила, управляющие дополнительными подзадачами или дополнительными аспектами экспертной задачи (метазнания).&lt;/p&gt;
&lt;p&gt;После установления основной структуры БЗ ЭС производится доработка системы до действующего прототипа, включая разработку и адаптацию интерфейсов, с помощью которых система будет общаться с пользователем и экспертом. Необходимо обратить особое внимание на языковые возможности интерфейсов, их простоту и удобство для управления работой ЭС. Система должна обеспечивать пользователю возможность легким и естественным образом уточнять непонятные моменты, приостанавливать работу и т.д.&lt;/p&gt;
&lt;p&gt;Работа по доведению системы до промышленной, а затем и коммерческой версии носит главным образом, технологический характер.&lt;/p&gt;

</learning:content>
        <learning:isLectureOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#m_ProductionRules"/>
        <learning:hasResource rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_IntroductionToSystemsBasedOnKnowledge"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_OverviewOfModelsAndToolsForKnowledgeRepresentation -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_OverviewOfModelsAndToolsForKnowledgeRepresentation">
        <rdf:type rdf:resource="&learning;Lecture"/>
        <rdfs:label xml:lang="en">Overview of models and tools for knowledge representation</rdfs:label>
        <rdfs:label xml:lang="ru">Обзор моделей и инструментов представления знаний</rdfs:label>
        <learning:numberOfLecture rdf:datatype="&xsd;integer">2</learning:numberOfLecture>
        <learning:content xml:lang="ru">&lt;p&gt;&lt;b&gt; Слайд 1 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 2 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Под представлением знаний понимается методика и форма структурированного описания и хранения в памяти вычислительной машины знаний человека-эксперта. Существует множество различных способов представления знаний, и при построении новой экспертной системы может быть выбран один из них, или использоваться сочетание нескольких способов. Во многом, от выбранного способа зависит успех экспертной системы и эффективность ее работы. Каждый из способов обладает своими преимуществами при решении одних задач, и малоэффективен для других. Наиболее важными критериями, пожалуй, можно назвать качество решения, предоставляемого экспертной системой (то есть процент ошибок, скорость получения решения и пр.) и простоту понимания и модификации базы знаний. При выборе метода представления знаний можно руководствоваться общепринятыми для данной предметной области подходами. Так, например, в задачах проектирования распространены табличные описания, в медицине, как правило, постановка диагноза и лечение болезней описываются в свободной форме, с использованием неформальных правил. Решение игровых задач, доказательство теорем может быть описано с помощью языка логики.&lt;/p&gt;

&lt;p&gt; Однако не всегда можно однозначно проецировать способ мышления человека во время решения задач на какую-либо определенную модель представления знания. Большинство задач на практике являются комплексными, и для формального описания знаний, необходимых для их решения, требуется использование нескольких различных моделей. Возможно, что в процессе проектирования потребуется изменить форму представления знаний, в целях повышения эффективности экспертной системы, открытости и модифицируемости базы знаний и пр. Определенные ограничения на доступные способы представления знаний накладывает и используемый инструментарий. &lt;/p&gt;

&lt;p&gt; Формально представление – это множество синтаксических и семантических соглашений, которое делает возможным описание какого-либо предмета. В искусственном интеллекте под предметом понимается состояние некоторой предметной области или среды, а именно объекты среды, их свойства и отношения, которые существуют между ними. Синтаксис представления специфицирует набор правил, регламентирующих объединение символов для формирования корректных выражений на данном языке представления. А семантика – определяет, как должны интерпретироваться выражения, построенные в соответствии с синтаксическими правилами. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Слайд 3&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Но ошибочно считать, что представление знаний – это простое кодирование информации. Замена одних символов на другие не решает проблемы неоднозначности, присущей человеческому языку. Так многие задачи, легко решаемые человеком, с трудом реализуются на машине. В качестве примера можно привести фразу, описывающую тривиальную бытовую ситуацию:&lt;/p&gt;

&lt;p&gt;«Молотком стукнули по графину, и он разбился»&lt;/p&gt;

&lt;p&gt;Для человека очевиден ответ на вопрос «что разбилось?». Но чтобы на этот вопрос смогла ответить машина, следует ввести какое-либо правило, связывающее местоимение «он» с представленными в данной фразе объектами. Например, можно задать очередность следования предметов во фразе, и считать что второй предмет – графин – должен разбиться. Однако, очевидно, что этот подход работает не всегда:&lt;/p&gt;

&lt;p&gt; «Графином стукнули по кирпичу, и он разбился» &lt;/p&gt;

&lt;p&gt; Для человека очевидно, что и в первом, и во втором случае разбиться должен именно графин. Это объясняется тем, что начиная с первых лет жизни люди накапливают предварительное знание о мире. Но чрезвычайно трудно такие знания представлять в машинной памяти. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 4 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Конечно, существуют и другой тип задач, основанных на применении знаний. Например, задачи математической логики. Пусть нужно определить является ли теоремой логики высказываний формула:&lt;/p&gt;

&lt;p&gt;(α ∧ (β → γ)) → ((δ ∨ α ) ∧ (¬γ → ¬β)).&lt;/p&gt;

&lt;p&gt;Хотя сама запись и является непротиворечивой, человеку решить это задание довольно трудно, даже если он легко может изложить правила построения формул в логике высказываний. Машина же, напротив, легко справляется с интеллектуальными задачами такого рода.&lt;/p&gt;

&lt;p&gt;В данном примере проблема заключается в необходимости сложных рассуждений для интерпретации записанных знаний. Очевидно, такой формат представления знаний также не является предпочтительным.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 5 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Различие между приведенными на предыдущих двух слайдах примерами заключается в том, что знания, необходимые для решения задач в логике высказываний, можно выразить в виде нескольких компактных правил. А для правильного понимания фраз типа «X-ом стукнули по Y-ку, и он разбился» требуется множество знаний об окружающих нас объектах, которое на первый взгляд может показаться бесконечным, и множество исключений вроде пластиковых молотков и бронзовых или каменных ваз.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 6 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;С учетом сказанного выше, можно переформулировать определение для представления знаний следующим образом: «Представление знаний — это высокоуровневое описание понятий и действий, необходимых для решения проблемы на формальном языке, пригодном для построения компьютерной системы с одной стороны, и легком для понимания человеком, с другой».&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 7 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Представление знаний в табличной форме применялось еще в Вавилонском царстве, где правила умножения клинописных чисел наносились на глиняные таблички для изучения. Табличная форма записи легка для восприятия человеком. Правила в такой форме легко поддаются обработке или исполнению.&lt;/p&gt;

&lt;p&gt; Табличное представление знаний в памяти компьютера было впервые применено в конце 1950-х гг. компаниями General Electric, the Sutherland Corporation, the United States Air Force и получила название таблицы решений. Эти организации работали над проектом комплексного ведения файлов. Попытки поставить задачу с использованием традиционных блок-схем, структурных схем и комментариев закончились неудачей после шести лет работы, и это было типично для большинства больших проектов в те времена. Тогда в 1958 г. четыре аналитика, используя таблицы решений, смогли успешно поставить задачу менее чем за четыре недели, после чего она была решена в кратчайшие сроки. &lt;/p&gt;

&lt;p&gt; Компания Sutherland Corporation также использовала таблицы решений для составления спецификаций программ, после чего программистам оставалось лишь перевести данные из таблицы в машинные коды. General Electric, обнаружив, что блок-схемы и комментарии оказались полностью неприменимы для задач со сложной логикой, автоматизировала процесс непосредственной генерации программного кода из таблиц. В начале 1960-х гг. таблицы решений широко применяются для обобщения программного кода и разработки алгоритмов оптимизации. Название таблицы решений становится общепринятым названием данного метода. В 1970 г. канадская ассоциация по стандартизации вводит стандарт для таблиц решений (DECISION TABLES, CSA Standard Z243.1,1970). &lt;/p&gt;

&lt;p&gt; Более подробно с историей создания ПО для таблиц решений можно ознакомиться по ссылке, указанной внизу на слайде. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 8 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Таблицы решений (decision table), или как их еще называют — логические таблицы, отображают соотношения между комбинациями условий и комбинациями действий. В различных приложениях, таблицы решений могут иметь различную форму. Одной из возможных форм, является та, где каждое условие может быть сопоставлено с какой– либо определенной ситуацией или объектом (см. пример таблицы на слайде). Если некоторое условие или действие имеет место для данной ситуации, то в соответствующую ячейку таблицы заносится 1, в противном случае используется символ 0. Также можно задать последовательность действий, используя вместо символа «1» числа 1, 2, 3..., показывающие очередность выполнения действий.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 9 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;В таблице решений выделяют четыре компонента: перечень условий, перечень действий, матрицу соответствия условий и матрицу возможных действий. Обычно в ячейках матрицы соответствия условий используются символы 1/0, Да/Нет, Y/N. Если наличие или отсутствие данного условия не критично для выбранной ситуации, можно также использовать символ «—», обозначающий «не имеет значения». Однако в общем случае в ячейках таблицы решений могут использоваться любые символы, отражающие суть условия или действия: значения и диапазоны значений, коды и номера, символьные данные и т.п. В качестве действия может выступать также набор инструкций, подлежащих выполнению в случае выполнения условий.&lt;/p&gt;
&lt;p&gt;Структура таблицы модифицируется под конкретную задачу. Например, в процессе использования можно легко добавить столбец с кодом операции, которую необходимо выполнять для проверки заданного условия. Возможно использование упрощенного варианта таблицы, состоящей из пар «условие–действие» без указания каких-либо объектов или ситуаций. Не представляет труда и расширение таблицы на новые классы объектов — необходимо лишь добавить в конец таблицы недостающие столбцы. А добавление новых строк, содержащих возможный перечень условий и действий, напротив, представляется несколько более сложным, так как потребуется внести изменения для всех существующих записей (столбцов).&lt;/p&gt;

&lt;p&gt; Алгоритм поиска решения по таблице решений тривиален и прост в реализации. Интерпретирующая программа получает на вход конкретизированный набор условий для заданной ситуации и осуществляет последовательный перебор, подыскивая столбцы, где этот набор выполняется. Если такие столбцы находятся, то выполняется действие, указанное для этой ситуации. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 10 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Таблицы решений позволяют сделать процесс формализации знаний достаточно простым, сводя его к нескольким типовым шагам. Для любой задачи эти шаги включают:&lt;/p&gt;

&lt;p&gt; 1.	Описание всех требуемых действий. &lt;/p&gt;

&lt;p&gt; 2. Выявление перечня условий, необходимых для  выполнения указанных действий.&lt;/p&gt;

&lt;p&gt; 3.	Определение ключевого набора условий при решении проблемы. &lt;/p&gt;

&lt;p&gt; 4.	Поочередное описание ситуаций для частных решений проблемы.&lt;/p&gt;

&lt;p&gt; Содержание этих шагов можно рассмотреть на простом примере: пусть необходимо принять решение о пересечении улицы в зависимости от всевозможных факторов. &lt;/p&gt;

&lt;p&gt; Описание всех требуемых действий. В данном примере возможны всего два действия: «перейти улицу» и «стоять на месте». В действительности же количество возможных действий никак не связано со степенью сложности решаемой задачи. Не следует вводить избыточные действия там, где можно упростить описание. Например, в ситуации с переходом улицы можно было бы ввести действия: «перейти на зеленый свет светофора», «перейти на красный свет светофора», «перейти при любом сигнале светофора» и т.д. Очевидно, что такая избыточность не влияет на качество решения, т.к., в конечном итоге требуется принять решение идти или не идти. А вот практическое использование системы и ее поддержка в этом случае значительно усложняются. &lt;/p&gt;

&lt;p&gt; Выявление перечня условий, необходимых для выполнения действий. Для выявления перечня возможных условий потребуются знание о предметной области, т.к. эти условия формулируются в терминах решаемой проблемы. В нашем примере мы можем ввести две группы условий: объективные и субъективные. Первые относятся к внешним факторам по отношению к лицу, принимающему решение. В данном примере это «свет светофора», «наличие движущихся машин» и «расстояние до них». Вторая группа условий характеризует некоторые внутренние характеристики проблемы. Для ситуации с пересечением дороги можно учесть, например, насколько спешит переходящий ее человек, и насколько он склонен к риску. &lt;/p&gt;

&lt;p&gt; Определение ключевого набора условий при решении проблемы. От ключевого набора условий зависит глобальное решение проблемы. Т.е. при нарушении этих условий получить решение не возможно в принципе. Очевидно, при переходе дороги таким условием является наличие вблизи движущейся машины. Если машина есть, то дорогу переходить нельзя. &lt;/p&gt;

&lt;p&gt; Поочередное описание ситуаций для частных решений проблемы. При описании частных решений не обязательно рассматривать все возможные варианты комбинаций условий. Как было показано выше, можно комбинировать условия, используя неопределенные значения в ячейках таблицы. Также можно использовать логическое отрицание, которое в ряде случаев упрощает описание ситуации. Например, вместо перечисления различных сигналов светофора, при котором действие разрешено, можно указать то, при котором оно запрещено «не красный» или «не зеленый» и т.п. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 11 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Рассмотрим неформальную задачу: предположим, необходимо ответить на вопрос «Чем заняться сегодня?» Одна из возможных таблиц решений для данной задачи представлена на слайде. В данном примере представлена таблица с сочетаниями вариантов всех возможных условий. Каждый столбец позволяет сформировать одно простое правило поведения. Для столбца номер 1 это будет: «Если сегодня рабочий день и сегодня не выходной и идет дождь, то отправиться на работу».&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 12 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Однако достаточно беглого взгляда на таблицу чтобы определить главный недостаток данного примера — избыточность. Первая и вторая ситуация рекомендуют нам одно и то же — пойти на работу. Отличаются эти ситуации только одним условием: идет или не идет дождь.&lt;/p&gt;

&lt;p&gt; Следовательно, можно объединить эти ситуации в одну, поставив при этом против условия «идет дождь» символ «—» (не имеет значения). Аналогично можно поступить с ситуациями 3 и 5 (отличается только ответ на вопрос «Сегодня рабочий день?»), 4 и 6 (отличается только ответ на вопрос «Сегодня выходной?»). &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 13 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Таким образом, объединения похожих ситуаций, с одновременной заменой значений ответов на несущественные вопросы на прочерк, таблица решений примет следующий вид. Этот процесс называется оптимизацией таблицы решений. Первые три столбца таблицы теперь представляют составные правила для ситуаций, что позволяет значительно сократить размер таблицы.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 14 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Рассмотрим еще один пример построения таблицы решений на примере выбора оптических элементов в задаче синтеза оптической системы (объектива) в зависимости от значений параметров классификации по техническим характеристикам: J — светосила системы, W — угловое поле, F — фокусное расстояние, L — хроматический диапазон, Q — качество изображения (степень аберрационной коррекции), S — задний фокальный отрезок, D — положение входного зрачка. &lt;/p&gt;

&lt;p&gt;1.	Описание всех требуемых действий. В данном примере возможны всего четыре действия: рекомендовать элемент из списков базовых (B), коррекционных (C), светосильных (T) или широкоугольных (Y). Как уже было сказано, не следует вводить избыточные действия там, где можно упростить описание. Например, в данной ситуации можно было бы ввести действия для всех возможных разновидностей оптических элементов с учетом формы поверхности и толщины. Очевидно, что такая избыточность не влияет на качество решения, поскольку в конечном итоге требуется принять решение о выборе конкретного элемента из списков B, C, T или Y, поэтому достаточно просто указать его номер или код. &lt;/p&gt;

&lt;p&gt;2.	Выявление перечня условий, необходимых для выполнения указанных действий. Для выявления возможных условий потребуются знания о предметной области, поскольку эти условия формулируются в терминах решаемой проблемы. В нашем примере можно ввести три группы условий: по оптическим характеристикам (параметры J, W, F), по назначению (L, Q) и по конструктивным особенностям (S, D). Каждое из перечисленных условий разделяется на три диапазона значений, обозначенных индексами «0», «1» и «2», которые и будут записываться в таблице решений. Это значительно упрощает восприятие таблиц решений, т.к. вместо различных единиц измерения и различных диапазонов используются унифицированные обощеные индексные значения.&lt;/p&gt;

&lt;p&gt;3.	Определение ключевого набора условий при решении проблемы.  В данном примере один из параметров классификации по техническим характеристикам является ключевым, а именно D — положение входного зрачка.&lt;/p&gt;

&lt;p&gt;4.	Поочередное описание ситуаций для частных решений проблемы. Повторимся, что при описании частных решений необязательно рассматривать все возможные варианты комбинаций условий, и можно комбинировать условия, используя неопределенные значения в ячейках таблицы, а также логическое отрицание. Таким образом, для каждого оптического элемента достаточно указать одно или нескоько условий, а не все.&lt;/p&gt;

&lt;p&gt; 4.	Поочередное описание ситуаций для частных решений проблемы. Повторимся, что при описании частных решений необязательно рассматривать все возможные варианты комбинаций условий, и можно комбинировать условия, используя неопределенные значения в ячейках таблицы, а также логическое отрицание. Таким образом, для каждого оптического элемента достаточно указать одно или несколько условий, а не все. &lt;/p&gt;

&lt;p&gt; Один из возможных вариантов решений для описываемого примера приведен в на данном слайде. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 15 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Основным достоинством таблиц решений является высокая степень формализации, наглядности процесса принятия решений. Они строятся регулярным образом и могут наращиваться практически до бесконечности, то есть являются универсальным средством решения задач, для которых возможно описание ситуаций с помощью ограниченного набора условий, например, выбор конфигурации из заданного набора элементов или проектирование деталей, представляющих собой поверхности вращения.&lt;/p&gt;
&lt;p&gt;Однако если различные ситуации характеризуются разными условиями, то таблицы решений становятся сильно разреженными и делают данный подход малоэффективным.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 16 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;В настоящее время таблицы решений широко используются в задачах, связанных с логической обработкой данных. На рынке представлено множество компьютерных программ, основанных на использовании данной парадигмы. В качестве примера непосредственной реализации таблиц решений можно привести программу LogicGem фирмы Catalyst Development.&lt;/p&gt;

&lt;p&gt; Демонстрационную версию этой программы можно найти на сайте разработчика http://www.catalyst.com/products/logicgem/. &lt;/p&gt;

&lt;p&gt; Ссылка на методическое пособие http://books.ifmo.ru/file/pdf/497.pdf &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 17 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;В рамках данного курса практика по построению экспертной системы осуществляется в системе Drools, для которой разработан модуль Drools Expert. Этот модуль позволяет редактировать базу знаний с помощью таблиц решений. Ссылки на сайт разработчика и методическое пособие представлены на данном слайде.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 18 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Подход, во многом близкий к описанному выше, был предложен в системе STRIPS (сокр. от STanford Research Institute Problem Solver). Эту систему разработали в 1971 г. два исследователя — Ричард Файкс (Fikes) и Нильс Нильсон (Nilsson) [см. ссылку «*»]. Программа предназначалась для решения проблемы формирования плана поведения мобильного робота Shakey, перемещающего предметы через множество комнат. Текущее состояние окружающей среды — помещений и предметов в них — представляется набором выражений предикат–аргумент, которые в совокупности образуют модель мира. Поиск решения в этой системе был основан на методологии анализа целей и средств (mean–ends analysis) системы General Problem Solver, а для проверки истинности предварительных условий действия в текущем состоянии применялась методология доказательства теорем из системы QA3.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 19 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Фотография робота Shakey представлена на данном слайде. Это был один из первых мобильных роботов.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 20 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Фотография робота Shakey в работе. Робот определяет препятствия и строит план дальнейшего маршрута.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 21 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;На данном слайде представлена фотография групп разработчиков с роботом. В 1983 году Shakey был передан в музей компьютерной истории в Вашингтоне. Ссылка на сайт музея приведена над фотографией.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 22 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Общепринятая для ИИ конструкция предикат–аргумент, определяется следующим образом: &lt;/p&gt;

&lt;p&gt;&lt;предикат&gt; ::= &lt;предикатный символ&gt; (&lt;аргумент1&gt;, ..., &lt;аргументn&gt;).&lt;/p&gt;

&lt;p&gt;Различают одноместные или n-местные предикаты. В случае одноместного предиката считается, что аргумент обладает свойством, выраженным предикатным символом. N-местный предикат описывает отношение между объектами, которые заданы аргументами.&lt;/p&gt;

&lt;p&gt;Примером ситуации, описываемой с помощью двухместного предиката, может быть нахождение робота в определенной комнате:&lt;/p&gt;

&lt;p&gt;Пat(robot, roomA).&lt;/p&gt;

&lt;p&gt;Данный предикат означает, что объект robot находится в комнате roomA. Порядок следования аргументов в предикате определяется разработчиком, но должен быть неизменным везде, где этот предикат используется. Можно было бы написать at(roomA, robot) и придать этой записи аналогичный смысл, но использовать одновременно в пределах одной базы знаний записи at(robot, roomA) и at(roomA, robot) нельзя.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 23 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;С помощью множества предикатов можно описать текущую модель мира, то есть набор конкретных объектов, их свойств и отношений. Например, исходная ситуация может описываться следующим множеством:&lt;/p&gt;

&lt;p&gt;W1 = { at(robot, roomA), at(box1, roomB), at(box2, roomC) }.&lt;/p&gt;

&lt;p&gt;Конечная ситуация также задается множеством предикатов:&lt;/p&gt;

&lt;p&gt;WK = { at(box1, roomА), at(box2, roomВ) }.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 24 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Для описания действий, которые может выполнять робот, используются операторы, применяемые к текущей модели мира. Эти операторы позволяют добавлять или изымать некоторые факты из текущей модели. Например, действие move(X, Y) («Переместить робота из комнаты X в комнату Y») в модели W1 приводит к формированию новой модели W2. При этом факт at(robot, roomA) будет изъят из модели, а at(robot, roomВ) добавлен.&lt;/p&gt;

&lt;p&gt;Множество допустимых операций, таких как перемещение робота или перенос предметов, кодируются в таблице операторов, как показано на данном слайде, которая близка по структуре к таблице решений, но предполагает обязательное наличие модели мира.&lt;/p&gt;

&lt;p&gt;Второй оператор push(X, Y, Z) описывает манипуляции с моделью мира для действия «Перенести ящик X из комнаты Y в комнату Z».&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 25 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Как уже было отмечено, задачей системы STRIPS является формирование плана действий робота для достижения цели. Таким образом, результатом работы системы должна быть последовательность операторов, применение которых к исходной модели мира позволяет достичь целевой модели. Зная целевое состояние среды, можно было бы перебирать последовательно или случайно комбинации операторов, пока цель не будет достигнута. Но экспоненциальный рост количества вариантов при каждой новой проверке делает такой подход неприемлемым на практике.&lt;/p&gt;

&lt;p&gt;Для предотвращения экспоненциального роста вариантов возможных решений в качестве основы для работы системы был предложен метод «анализ целей и средств», идея которого состоит в том, чтобы с каждой новой операцией отличие между текущим состоянием и целевым уменьшалось. Это предполагает наличие меры оценки «расстояния» в пространстве решений. Например, если очередная подцель сформулирована в виде предиката:&lt;/p&gt;

&lt;p&gt;at(box1, roomА),&lt;/p&gt;

&lt;p&gt;а ящик box1 находится в комнате roomВ, то перемещение робота из комнаты roomА в комнату roomС не приблизит текущее состояние к целевому (для модели W1). А перемещение из комнаты roomА в комнату roomВ, наоборот, уменьшит расстояние между текущим и целевым состоянием, так как позволит на следующем шаге переместить ящик box1 в комнату roomА.&lt;/p&gt;

&lt;p&gt;Алгоритм поиска требуемых операторов системы STRIPS основан на сопоставлении очередной подцели и списков добавления в таблице операторов. Для того чтобы узнать, применимо ли действие в некотором заданном состоянии, мы должны проверить истинность формулы в предварительном условии, т.е. доказать, что эта формула является логическим следствием из аксиом модели мира данного состояния. Если предварительное условие истинно, то действие применимо. Новые подцели выбираются из списка предварительного условия найденного оператора. Так, например, цель at(box1, roomА) соответствует элементу at(X, Z) в списке добавлений оператора push(X, Y, Z). Унификация этих двух предикатов (Х соответствует box1, а Z — roomA) позволяет выбрать из предварительного условия оператора новые подцели:&lt;/p&gt;

&lt;p&gt;at(robot, Y), at(box1, Y).&lt;/p&gt;

&lt;p&gt;Далее необходимо найти в модели мира предикат, содержащий объект (в данном случае это комната), который может конкретизировать символ Y. Таким предикатом может быть, например, at(box1, roomB). Поставив в соответствие с символом Y объект roomB можно окончательно сформулировать очередные подцели:&lt;/p&gt;

&lt;p&gt;at(robot, roomB) и at(box1, roomB). &lt;/p&gt;

&lt;p&gt;Теперь первый элемент в этом списке указывает желаемое (целевое) положение робота, а второй элемент уже присутствует в модели мира W1. Следовательно, после применения оператора push к модели мира W1, необходимо добавить at(robot, roomB) и удалить at(robot, roomA). В результате получится новая модель: &lt;/p&gt;

&lt;p&gt;W2 = { at(robot, roomB), at(box1, roomB), at(box2, roomC) }. &lt;/p&gt;

&lt;p&gt;Отметим, что если формула из списка добавления уже присутствует в текущем состоянии модели мира (состоянии, к которому применяется действие), то эта формула не будет добавлена вторично. Аналогично, если формула из списка удаления уже отсутствует в текущем состоянии, то ее удаление игнорируется. Все формулы, которые не упоминаются в таблице оператора, остаются неизменными в новом состоянии. Это последнее утверждение в литературе называют предположением STRIPS (STRIPS assumption). Описанная процедура повторяется до тех пор, пока очередная модель не будет соответствовать целевой. &lt;/p&gt;

&lt;p&gt;&lt;b&gt; Слайд 26 &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Так как таблица операторов, модель мира и цели представлены с помощью одного и того же синтаксиса в виде конструкций предикат–аргумент, то, применяя описанную выше схему сопоставления, программа довольно просто находит, какие именно операции нужно выполнить для достижения поставленной цели. Всё, что нужно для этого сделать, — просмотреть списки добавлений в описании операторов и найти в них элемент, соответствующий заданной цели.&lt;/p&gt;

&lt;p&gt;Однако существуют ситуации, в которых система STRIPS оказывается не способной решать поставленные задачи. Одна из таких ситуаций получила название аномалия Зюссмана (Sussman Anomaly). Подробнее эти вопросы будут рассмотрены в лекции по нелинейному планированию.&lt;/p&gt;
</learning:content>
        <learning:isLectureOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#m_ProductionRules"/>
        <learning:hasResource rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_OverviewOfModelsAndToolsForKnowledgeRepresentation"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_SemanticNetworks -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_SemanticNetworks">
        <rdf:type rdf:resource="&learning;Lecture"/>
        <rdfs:label xml:lang="en">Semantic networks</rdfs:label>
        <rdfs:label xml:lang="ru">Семантические сети</rdfs:label>
        <learning:numberOfLecture rdf:datatype="&xsd;integer">5</learning:numberOfLecture>
        <learning:isLectureOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#m_ProductionRules"/>
        <learning:hasResource rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_SemanticNetworks"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_TheTheoryAccordingToTheRulesProductionModelRulesAndMetapravila -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#l_TheTheoryAccordingToTheRulesProductionModelRulesAndMetapravila">
        <rdf:type rdf:resource="&learning;Lecture"/>
        <rdfs:label xml:lang="en">The theory according to the rules (production model, rules and metapravila)</rdfs:label>
        <rdfs:label xml:lang="ru">Теория по правилам (продукционная модель, правила и метаправила)</rdfs:label>
        <learning:numberOfLecture rdf:datatype="&xsd;integer">3</learning:numberOfLecture>
        <learning:isLectureOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#m_ProductionRules"/>
        <learning:hasResource rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_TheTheoryAccordingToTheRulesProductionModelRulesAndMetapravila"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#m_ProductionRules -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#m_ProductionRules">
        <rdf:type rdf:resource="&schema;Module"/>
        <rdfs:label xml:lang="en">Production Rules</rdfs:label>
        <rdfs:label xml:lang="ru">Продукционные правила</rdfs:label>
        <learning:numberOfModule rdf:datatype="&xsd;integer">1</learning:numberOfModule>
        <learning:isModuleOf rdf:resource="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#CourseIntelligentSystems"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_FramesAndObjectOrientedProgramming -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_FramesAndObjectOrientedProgramming">
        <rdf:type rdf:resource="&learning;Resource"/>
        <learning:url>//www.slideshare.net/slideshow/embed_code/38338536</learning:url>
        <learning:resourceType rdf:resource="&learning;Presentation"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_IntroductionToSystemsBasedOnKnowledge -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_IntroductionToSystemsBasedOnKnowledge">
        <rdf:type rdf:resource="&learning;Resource"/>
        <learning:url>//www.slideshare.net/slideshow/embed_code/38338068</learning:url>
        <learning:resourceType rdf:resource="&learning;Presentation"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_OverviewOfModelsAndToolsForKnowledgeRepresentation -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_OverviewOfModelsAndToolsForKnowledgeRepresentation">
        <rdf:type rdf:resource="&learning;Resource"/>
        <learning:url>//www.slideshare.net/slideshow/embed_code/38338216</learning:url>
        <learning:resourceType rdf:resource="&learning;Presentation"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_SemanticNetworks -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_SemanticNetworks">
        <rdf:type rdf:resource="&learning;Resource"/>
        <learning:url>//www.slideshare.net/slideshow/embed_code/38338595</learning:url>
        <learning:resourceType rdf:resource="&learning;Presentation"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_TheTheoryAccordingToTheRulesProductionModelRulesAndMetapravila -->

    <owl:NamedIndividual rdf:about="http://www.semanticweb.org/fedulity/ontologies/2014/3/untitled-ontology-6#p_TheTheoryAccordingToTheRulesProductionModelRulesAndMetapravila">
        <rdf:type rdf:resource="&learning;Resource"/>
        <learning:url>//www.slideshare.net/slideshow/embed_code/38338400</learning:url>
        <learning:resourceType rdf:resource="&learning;Presentation"/>
    </owl:NamedIndividual>
    


    <!-- https://stack.versal.com/api2/assets/17be447f-2944-438a-97ff-31feeee4d940 -->

    <owl:NamedIndividual rdf:about="https://stack.versal.com/api2/assets/17be447f-2944-438a-97ff-31feeee4d940"/>
</rdf:RDF>



<!-- Generated by the OWL API (version 3.4.2) http://owlapi.sourceforge.net -->

